{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibBytes",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "lhs",
						"type": "bytes"
					},
					{
						"name": "rhs",
						"type": "bytes"
					}
				],
				"name": "publicAreBytesEqual",
				"outputs": [
					{
						"name": "equal",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes",
				"outputs": [
					{
						"name": "result",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "address"
					}
				],
				"name": "publicWriteAddress",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes"
					}
				],
				"name": "publicWriteBytes",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadAddress",
				"outputs": [
					{
						"name": "result",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes32"
					}
				],
				"name": "publicWriteBytes32",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "uint256"
					}
				],
				"name": "publicWriteUint256",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes32",
				"outputs": [
					{
						"name": "result",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadUint256",
				"outputs": [
					{
						"name": "result",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610a90806100206000396000f30060806040526004361061007f5763ffffffff60e060020a6000350416630945c63b811461008457806335997eaf146100ba5780633f2a25ec146100e75780637d0d772f1461010757806382e2fa241461012757806384f8775814610154578063b79650a414610174578063be766f1b14610194578063e3a85ce4146101c1575b600080fd5b34801561009057600080fd5b506100a461009f366004610724565b6101e1565b6040516100b19190610961565b60405180910390f35b3480156100c657600080fd5b506100da6100d536600461078b565b6101f6565b6040516100b1919061097d565b3480156100f357600080fd5b506100da6101023660046107d1565b610202565b34801561011357600080fd5b506100da61012236600461088d565b610217565b34801561013357600080fd5b5061014761014236600461078b565b610224565b6040516100b19190610953565b34801561016057600080fd5b506100da61016f366004610834565b610230565b34801561018057600080fd5b506100da61018f366004610834565b61023d565b3480156101a057600080fd5b506101b46101af36600461078b565b61024a565b6040516100b1919061096f565b3480156101cd57600080fd5b506101b46101dc36600461078b565b610256565b60006101ed8383610262565b90505b92915050565b60606101ed83836102a9565b606061020f84848461038a565b509192915050565b606061020f84848461040b565b60006101ed838361049f565b606061020f84848461051b565b606061020f84848461058b565b60006101ed8383610596565b60006101ed838361024a565b60006020601f8451010460018101905060005b818110156102a157602081028581015190850151808214945084610297578392505b5050600101610275565b505092915050565b606060006102b7848461024a565b905060208301925080830184511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a37901999170281525090151561032e5760405160e560020a62461bcd028152600401610325919061097d565b60405180910390fd5b50806040519080825280601f01601f19166020018201604052801561035d578160200160208202803883390190505b50915061038361036c83610609565b6020018461037987610609565b016020018361060c565b5092915050565b8160140183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156103f15760405160e560020a62461bcd028152600401610325919061097d565b5091016014018051600160a060020a031916919091189052565b8051826020010183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156104755760405160e560020a62461bcd028152600401610325919061097d565b5061049a8261048385610609565b0160200161049083610609565b835160200161060c565b505050565b60008160140183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156105085760405160e560020a62461bcd028152600401610325919061097d565b50500160140151600160a060020a031690565b8160200183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156105825760405160e560020a62461bcd028152600401610325919061097d565b50910160200152565b61049a83838361051b565b60008160200183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156105ff5760405160e560020a62461bcd028152600401610325919061097d565b5050016020015190565b90565b6020811015610636576001816020036101000a03801983511681855116808217865250505061049a565b828214156106435761049a565b8282111561067d5760208103905080820181840181515b8285101561067557845186526020958601959094019361065a565b90525061049a565b60208103905080820181840183515b828510156106a85782518252601f19928301929091019061068c565b85525050505050565b60006106bd82356109df565b9392505050565b60006106bd8235610609565b6000601f820183136106e157600080fd5b81356106f46106ef826109b4565b61098e565b9150808252602083016020830185838301111561071057600080fd5b61071b8382846109f0565b50505092915050565b6000806040838503121561073757600080fd5b82356001604060020a0381111561074d57600080fd5b610759858286016106d0565b92505060208301356001604060020a0381111561077557600080fd5b610781858286016106d0565b9150509250929050565b6000806040838503121561079e57600080fd5b82356001604060020a038111156107b457600080fd5b6107c0858286016106d0565b9250506020610781858286016106c4565b6000806000606084860312156107e657600080fd5b83356001604060020a038111156107fc57600080fd5b610808868287016106d0565b9350506020610819868287016106c4565b925050604061082a868287016106b1565b9150509250925092565b60008060006060848603121561084957600080fd5b83356001604060020a0381111561085f57600080fd5b61086b868287016106d0565b935050602061087c868287016106c4565b925050604061082a868287016106c4565b6000806000606084860312156108a257600080fd5b83356001604060020a038111156108b857600080fd5b6108c4868287016106d0565b93505060206108d5868287016106c4565b92505060408401356001604060020a038111156108f157600080fd5b61082a868287016106d0565b610906816109df565b82525050565b610906816109eb565b61090681610609565b6000610929826109db565b80845261093d8160208601602086016109fc565b61094681610a2c565b9093016020019392505050565b602081016101f082846108fd565b602081016101f0828461090c565b602081016101f08284610915565b602080825281016106bd818461091e565b6040518181016001604060020a03811182821017156109ac57600080fd5b604052919050565b60006001604060020a038211156109ca57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b82818337506000910152565b60005b83811015610a175781810151838201526020016109ff565b83811115610a26576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a72305820618ac1935e85afc072fdeaf90b179f7925de1375819d492e639e37082246b4df6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA90 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x1C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA4 PUSH2 0x9F CALLDATASIZE PUSH1 0x4 PUSH2 0x724 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x961 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0x88D JUMP JUMPDEST PUSH2 0x217 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x147 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x953 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x96F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x262 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x38A JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x40B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x49F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x596 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x24A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x297 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x275 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B7 DUP5 DUP5 PUSH2 0x24A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x32E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x35D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x383 PUSH2 0x36C DUP4 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x379 DUP8 PUSH2 0x609 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x60C JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x475 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP PUSH2 0x49A DUP3 PUSH2 0x483 DUP6 PUSH2 0x609 JUMP JUMPDEST ADD PUSH1 0x20 ADD PUSH2 0x490 DUP4 PUSH2 0x609 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0x60C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x508 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x49A DUP4 DUP4 DUP4 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5FF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x643 JUMPI PUSH2 0x49A JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x67D JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x675 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x65A JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x49A JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x6A8 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x68C JUMP JUMPDEST DUP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BD DUP3 CALLDATALOAD PUSH2 0x9DF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BD DUP3 CALLDATALOAD PUSH2 0x609 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6F4 PUSH2 0x6EF DUP3 PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x98E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x71B DUP4 DUP3 DUP5 PUSH2 0x9F0 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x74D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x759 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x781 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C0 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x781 DUP6 DUP3 DUP7 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x7FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x808 DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x819 DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x86B DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x87C DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8C4 DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x8D5 DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x9DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x929 DUP3 PUSH2 0x9DB JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x93D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x946 DUP2 PUSH2 0xA2C JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x8FD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x90C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x915 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x6BD DUP2 DUP5 PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x9CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA17 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9FF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA26 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 PUSH2 0x8AC1 SWAP4 0x5e DUP6 0xaf 0xc0 PUSH19 0xFDEAF90B179F7925DE1375819D492E639E3708 0x22 0x46 0xb4 0xdf PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "685:3605:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;685:3605:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x60806040526004361061007f5763ffffffff60e060020a6000350416630945c63b811461008457806335997eaf146100ba5780633f2a25ec146100e75780637d0d772f1461010757806382e2fa241461012757806384f8775814610154578063b79650a414610174578063be766f1b14610194578063e3a85ce4146101c1575b600080fd5b34801561009057600080fd5b506100a461009f366004610724565b6101e1565b6040516100b19190610961565b60405180910390f35b3480156100c657600080fd5b506100da6100d536600461078b565b6101f6565b6040516100b1919061097d565b3480156100f357600080fd5b506100da6101023660046107d1565b610202565b34801561011357600080fd5b506100da61012236600461088d565b610217565b34801561013357600080fd5b5061014761014236600461078b565b610224565b6040516100b19190610953565b34801561016057600080fd5b506100da61016f366004610834565b610230565b34801561018057600080fd5b506100da61018f366004610834565b61023d565b3480156101a057600080fd5b506101b46101af36600461078b565b61024a565b6040516100b1919061096f565b3480156101cd57600080fd5b506101b46101dc36600461078b565b610256565b60006101ed8383610262565b90505b92915050565b60606101ed83836102a9565b606061020f84848461038a565b509192915050565b606061020f84848461040b565b60006101ed838361049f565b606061020f84848461051b565b606061020f84848461058b565b60006101ed8383610596565b60006101ed838361024a565b60006020601f8451010460018101905060005b818110156102a157602081028581015190850151808214945084610297578392505b5050600101610275565b505092915050565b606060006102b7848461024a565b905060208301925080830184511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a37901999170281525090151561032e5760405160e560020a62461bcd028152600401610325919061097d565b60405180910390fd5b50806040519080825280601f01601f19166020018201604052801561035d578160200160208202803883390190505b50915061038361036c83610609565b6020018461037987610609565b016020018361060c565b5092915050565b8160140183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156103f15760405160e560020a62461bcd028152600401610325919061097d565b5091016014018051600160a060020a031916919091189052565b8051826020010183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156104755760405160e560020a62461bcd028152600401610325919061097d565b5061049a8261048385610609565b0160200161049083610609565b835160200161060c565b505050565b60008160140183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156105085760405160e560020a62461bcd028152600401610325919061097d565b50500160140151600160a060020a031690565b8160200183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156105825760405160e560020a62461bcd028152600401610325919061097d565b50910160200152565b61049a83838361051b565b60008160200183511015606060405190810160405280602b8152602001600080516020610a37833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156105ff5760405160e560020a62461bcd028152600401610325919061097d565b5050016020015190565b90565b6020811015610636576001816020036101000a03801983511681855116808217865250505061049a565b828214156106435761049a565b8282111561067d5760208103905080820181840181515b8285101561067557845186526020958601959094019361065a565b90525061049a565b60208103905080820181840183515b828510156106a85782518252601f19928301929091019061068c565b85525050505050565b60006106bd82356109df565b9392505050565b60006106bd8235610609565b6000601f820183136106e157600080fd5b81356106f46106ef826109b4565b61098e565b9150808252602083016020830185838301111561071057600080fd5b61071b8382846109f0565b50505092915050565b6000806040838503121561073757600080fd5b82356001604060020a0381111561074d57600080fd5b610759858286016106d0565b92505060208301356001604060020a0381111561077557600080fd5b610781858286016106d0565b9150509250929050565b6000806040838503121561079e57600080fd5b82356001604060020a038111156107b457600080fd5b6107c0858286016106d0565b9250506020610781858286016106c4565b6000806000606084860312156107e657600080fd5b83356001604060020a038111156107fc57600080fd5b610808868287016106d0565b9350506020610819868287016106c4565b925050604061082a868287016106b1565b9150509250925092565b60008060006060848603121561084957600080fd5b83356001604060020a0381111561085f57600080fd5b61086b868287016106d0565b935050602061087c868287016106c4565b925050604061082a868287016106c4565b6000806000606084860312156108a257600080fd5b83356001604060020a038111156108b857600080fd5b6108c4868287016106d0565b93505060206108d5868287016106c4565b92505060408401356001604060020a038111156108f157600080fd5b61082a868287016106d0565b610906816109df565b82525050565b610906816109eb565b61090681610609565b6000610929826109db565b80845261093d8160208601602086016109fc565b61094681610a2c565b9093016020019392505050565b602081016101f082846108fd565b602081016101f0828461090c565b602081016101f08284610915565b602080825281016106bd818461091e565b6040518181016001604060020a03811182821017156109ac57600080fd5b604052919050565b60006001604060020a038211156109ca57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b82818337506000910152565b60005b83811015610a175781810151838201526020016109ff565b83811115610a26576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a72305820618ac1935e85afc072fdeaf90b179f7925de1375819d492e639e37082246b4df6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x1C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA4 PUSH2 0x9F CALLDATASIZE PUSH1 0x4 PUSH2 0x724 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x961 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0x88D JUMP JUMPDEST PUSH2 0x217 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x147 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x953 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDA PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x834 JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x96F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x262 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x38A JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x40B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x49F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F DUP5 DUP5 DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x596 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED DUP4 DUP4 PUSH2 0x24A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x297 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x275 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B7 DUP5 DUP5 PUSH2 0x24A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x32E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x35D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x383 PUSH2 0x36C DUP4 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x379 DUP8 PUSH2 0x609 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x60C JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x475 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP PUSH2 0x49A DUP3 PUSH2 0x483 DUP6 PUSH2 0x609 JUMP JUMPDEST ADD PUSH1 0x20 ADD PUSH2 0x490 DUP4 PUSH2 0x609 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0x60C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x508 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x49A DUP4 DUP4 DUP4 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xA37 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5FF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x97D JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x643 JUMPI PUSH2 0x49A JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x67D JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x675 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x65A JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x49A JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x6A8 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x68C JUMP JUMPDEST DUP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BD DUP3 CALLDATALOAD PUSH2 0x9DF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BD DUP3 CALLDATALOAD PUSH2 0x609 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6F4 PUSH2 0x6EF DUP3 PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x98E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x71B DUP4 DUP3 DUP5 PUSH2 0x9F0 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x74D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x759 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x781 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C0 DUP6 DUP3 DUP7 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x781 DUP6 DUP3 DUP7 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x7FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x808 DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x819 DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x86B DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x87C DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8C4 DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x8D5 DUP7 DUP3 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x6D0 JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x9DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x906 DUP2 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x929 DUP3 PUSH2 0x9DB JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x93D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x946 DUP2 PUSH2 0xA2C JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x8FD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x90C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F0 DUP3 DUP5 PUSH2 0x915 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x6BD DUP2 DUP5 PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x9CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA17 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9FF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA26 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 PUSH2 0x8AC1 SWAP4 0x5e DUP6 0xaf 0xc0 PUSH19 0xFDEAF90B179F7925DE1375819D492E639E3708 0x22 0x46 0xb4 0xdf PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "685:3605:0:-;;;;;;;;;-1:-1:-1;;;685:3605:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;937:196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;937:196:0;;;;;;;;;;;;;;;;;;;;;;;;;3843:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3843:211:0;;;;;;;;;;;;;;;;;1794:226;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1794:226:0;;;;;;;;;4061:227;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4061:227:0;;;;;;;;;1347:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1347:210:0;;;;;;;;;;;;;;;;;2702:226;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2702:226:0;;;;;;;;;3610;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3610:226:0;;;;;;;;;2256:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2256:210:0;;;;;;;;;;;;;;;;;3164;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3164:210:0;;;;;;;;;937:196;1047:10;1081:23;1095:3;1100;1081:13;:23::i;:::-;1073:31;-1:-1:-1;937:196:0;;;;;:::o;3843:211::-;3961:19;4005;4015:1;4018:5;4005:9;:19::i;1794:226::-;1938:5;1966:29;1979:1;1982:5;1989;1966:12;:29::i;:::-;-1:-1:-1;2012:1:0;;1794:226;-1:-1:-1;;1794:226:0:o;4061:227::-;4208:5;4236:27;4247:1;4250:5;4257;4236:10;:27::i;1347:210::-;1467:14;1506:21;1518:1;1521:5;1506:11;:21::i;2702:226::-;2846:5;2874:29;2887:1;2890:5;2897;2874:12;:29::i;3610:226::-;3754:5;3782:29;3795:1;3798:5;3805;3782:12;:29::i;2256:210::-;2376:14;2415:21;2427:1;2430:5;2415:11;:21::i;3164:210::-;3284:14;3323:21;3335:1;3338:5;3323:11;:21::i;1091:899:1:-;1197:10;1350:4;1343;1337:3;1331:10;1327:21;1323:32;1480:3;1466:12;1462:22;1446:38;;1611:1;1597:356;1620:12;1617:1;1614:19;1597:356;;;1706:4;1699:12;;1690:22;;;1684:29;1751:22;;;1745:29;1800:20;;;;-1:-1:-1;1800:20:1;1837:2;;1909:12;1904:17;;1837:2;-1:-1:-1;;1647:1:1;1640:9;1597:356;;;-1:-1:-1;;1091:899:1;;;;:::o;7192:757::-;7311:19;7385:25;7413:21;7425:1;7428:5;7413:11;:21::i;:::-;7385:49;;7453:2;7444:11;;;;7589:17;7581:5;:25;7569:1;:8;:37;;7620:22;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7620:22:1;;;;-1:-1:-1;;;;;7620:22:1;;;7548:104;;;;;;;-1:-1:-1;;;;;7548:104:1;;;;;;;;;;;;;;;;;;;7734:17;7724:28;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7724:28:1;;7715:37;;7762:156;7782:21;7796:6;7782:13;:21::i;:::-;7806:2;7782:26;7867:5;7848:16;7862:1;7848:13;:16::i;:::-;:24;7875:2;7848:29;7891:17;7762:6;:156::i;:::-;7192:757;;;;;:::o;3309:1411::-;3484:5;3492:2;3484:10;3472:1;:8;:22;;3536;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3536:22:1;;;;-1:-1:-1;;;;;3536:22:1;;;3451:117;;;;;;;-1:-1:-1;;;;;3451:117:1;;;;;;;;;;-1:-1:-1;4504:13:1;;3815:2;4504:13;4498:20;;-1:-1:-1;;;;;;4494:93:1;4682:21;;;;4660:44;;3880:834::o;8185:609::-;8446:5;:12;8402:5;8410:2;8402:10;:56;8390:1;:8;:68;;8472:22;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8472:22:1;;;;-1:-1:-1;;;;;8472:22:1;;;8369:135;;;;;;;-1:-1:-1;;;;;8369:135:1;;;;;;;;;;;8548:239;8587:5;8568:16;8582:1;8568:13;:16::i;:::-;:24;8595:2;8568:29;8641:20;8655:5;8641:13;:20::i;:::-;8717:5;:12;8732:2;8717:17;8548:6;:239::i;:::-;8185:609;;;:::o;2204:868::-;2325:14;2388:5;2396:2;2388:10;2376:1;:8;:22;;2440;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2440:22:1;;;;-1:-1:-1;;;;;2440:22:1;;;2355:117;;;;;;;-1:-1:-1;;;;;2355:117:1;;;;;;;;;;-1:-1:-1;;2974:13:1;2719:2;2974:13;2968:20;-1:-1:-1;;;;;2964:69:1;;2204:868::o;5664:438::-;5839:5;5847:2;5839:10;5827:1;:8;:22;;5863;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5863:22:1;;;;-1:-1:-1;;;;;5863:22:1;;;5806:89;;;;;;;-1:-1:-1;;;;;5806:89:1;;;;;;;;;;-1:-1:-1;6065:13:1;;5976:2;6065:13;6058:28;6044:52::o;6769:187::-;6911:38;6924:1;6927:5;6942;6911:12;:38::i;4956:472::-;5077:14;5140:5;5148:2;5140:10;5128:1;:8;:22;;5164;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5164:22:1;;;;-1:-1:-1;;;;;5164:22:1;;;5107:89;;;;;;;-1:-1:-1;;;;;5107:89:1;;;;;;;;;;-1:-1:-1;;5375:13:1;5277:2;5375:13;5369:20;;4956:472::o;633:203:2:-;790:5;633:203::o;1076:3746::-;1225:2;1216:6;:11;1212:3604;;;1514:1;1504:6;1500:2;1496:15;1491:3;1487:25;1483:33;1565:4;1561:9;1552:6;1546:13;1542:29;1614:4;1607;1601:11;1597:22;1655:1;1652;1649:8;1643:4;1636:22;1453:219;;;;;;1776:4;1766:6;:14;1762:59;;;1800:7;;1762:59;2522:4;2513:6;:13;2509:2297;;;2848:2;2840:6;2836:15;2826:25;;2896:6;2888;2884:19;2946:6;2940:4;2936:17;3273:4;3267:11;3374:198;3392:4;3384:6;3381:16;3374:198;;;3440:13;;3427:27;;3501:2;3537:13;;;;3489:15;;;;3374:198;;;3661:18;;-1:-1:-1;2555:1142:2;;;3942:2;3934:6;3930:15;3920:25;;3990:6;3982;3978:19;4040:6;4034:4;4030:17;4370:6;4364:13;4473:192;4491:4;4483:6;4480:16;4473:192;;;4539:11;;4526:25;;-1:-1:-1;;4584:13:2;;;;4630;;;;4473:192;;;4755:19;;-1:-1:-1;;1076:3746:2;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;130:118;;197:46;235:6;222:20;197:46;;256:440;;350:4;338:17;;334:27;-1:-1;324:2;;375:1;372;365:12;324:2;412:6;399:20;434:64;449:48;490:6;449:48;;;434:64;;;425:73;;518:6;511:5;504:21;554:4;546:6;542:17;587:4;580:5;576:16;622:3;613:6;608:3;604:16;601:25;598:2;;;639:1;636;629:12;598:2;649:41;683:6;678:3;673;649:41;;;317:379;;;;;;;;829:574;;;968:2;956:9;947:7;943:23;939:32;936:2;;;984:1;981;974:12;936:2;1019:31;;-1:-1;;;;;1059:30;;1056:2;;;1102:1;1099;1092:12;1056:2;1122:62;1176:7;1167:6;1156:9;1152:22;1122:62;;;1112:72;;998:192;1249:2;1238:9;1234:18;1221:32;-1:-1;;;;;1265:6;1262:30;1259:2;;;1305:1;1302;1295:12;1259:2;1325:62;1379:7;1370:6;1359:9;1355:22;1325:62;;;1315:72;;1200:193;930:473;;;;;;1410:470;;;1540:2;1528:9;1519:7;1515:23;1511:32;1508:2;;;1556:1;1553;1546:12;1508:2;1591:31;;-1:-1;;;;;1631:30;;1628:2;;;1674:1;1671;1664:12;1628:2;1694:62;1748:7;1739:6;1728:9;1724:22;1694:62;;;1684:72;;1570:192;1793:2;1811:53;1856:7;1847:6;1836:9;1832:22;1811:53;;1887:595;;;;2034:2;2022:9;2013:7;2009:23;2005:32;2002:2;;;2050:1;2047;2040:12;2002:2;2085:31;;-1:-1;;;;;2125:30;;2122:2;;;2168:1;2165;2158:12;2122:2;2188:62;2242:7;2233:6;2222:9;2218:22;2188:62;;;2178:72;;2064:192;2287:2;2305:53;2350:7;2341:6;2330:9;2326:22;2305:53;;;2295:63;;2266:98;2395:2;2413:53;2458:7;2449:6;2438:9;2434:22;2413:53;;;2403:63;;2374:98;1996:486;;;;;;2489:595;;;;2636:2;2624:9;2615:7;2611:23;2607:32;2604:2;;;2652:1;2649;2642:12;2604:2;2687:31;;-1:-1;;;;;2727:30;;2724:2;;;2770:1;2767;2760:12;2724:2;2790:62;2844:7;2835:6;2824:9;2820:22;2790:62;;;2780:72;;2666:192;2889:2;2907:53;2952:7;2943:6;2932:9;2928:22;2907:53;;;2897:63;;2868:98;2997:2;3015:53;3060:7;3051:6;3040:9;3036:22;3015:53;;3091:699;;;;3247:2;3235:9;3226:7;3222:23;3218:32;3215:2;;;3263:1;3260;3253:12;3215:2;3298:31;;-1:-1;;;;;3338:30;;3335:2;;;3381:1;3378;3371:12;3335:2;3401:62;3455:7;3446:6;3435:9;3431:22;3401:62;;;3391:72;;3277:192;3500:2;3518:53;3563:7;3554:6;3543:9;3539:22;3518:53;;;3508:63;;3479:98;3636:2;3625:9;3621:18;3608:32;-1:-1;;;;;3652:6;3649:30;3646:2;;;3692:1;3689;3682:12;3646:2;3712:62;3766:7;3757:6;3746:9;3742:22;3712:62;;4399:110;4472:31;4497:5;4472:31;;;4467:3;4460:44;4454:55;;;4516:101;4583:28;4605:5;4583:28;;4624:110;4697:31;4722:5;4697:31;;4741:297;;4841:38;4873:5;4841:38;;;4896:6;4891:3;4884:19;4908:63;4964:6;4957:4;4952:3;4948:14;4941:4;4934:5;4930:16;4908:63;;;5003:29;5025:6;5003:29;;;4983:50;;;4996:4;4983:50;;4821:217;-1:-1;;;4821:217;5461:193;5569:2;5554:18;;5583:61;5558:9;5617:6;5583:61;;5661:181;5763:2;5748:18;;5777:55;5752:9;5805:6;5777:55;;5849:193;5957:2;5942:18;;5971:61;5946:9;6005:6;5971:61;;6049:277;6175:2;6189:47;;;6160:18;;6250:66;6160:18;6302:6;6250:66;;6813:256;6875:2;6869:9;6901:17;;;-1:-1;;;;;6961:34;;6997:22;;;6958:62;6955:2;;;7033:1;7030;7023:12;6955:2;7049;7042:22;6853:216;;-1:-1;6853:216;7076:258;;-1:-1;;;;;7211:6;7208:30;7205:2;;;7251:1;7248;7241:12;7205:2;-1:-1;7324:4;7295;7272:17;;;;-1:-1;;7268:33;7314:15;;7142:192;7341:91;7415:12;;7399:33;7534:128;-1:-1;;;;;7603:54;;7586:76;7669:92;7742:13;7735:21;;7718:43;8248:145;8329:6;8324:3;8319;8306:30;-1:-1;8385:1;8367:16;;8360:27;8299:94;8402:268;8467:1;8474:101;8488:6;8485:1;8482:13;8474:101;;;8555:11;;;8549:18;8536:11;;;8529:39;8510:2;8503:10;8474:101;;;8590:6;8587:1;8584:13;8581:2;;;8655:1;8646:6;8641:3;8637:16;8630:27;8581:2;8451:219;;;;;8678:97;8766:2;8746:14;-1:-1;;8742:28;;8726:49"
			}
		}
	},
	"sources": {
		"current/test/TestLibBytes/TestLibBytes.sol": {
			"id": 0
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 1
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"current/test/TestLibBytes/TestLibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract TestLibBytes is\n    LibBytes\n{\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function publicAreBytesEqual(bytes memory lhs, bytes memory rhs)\n        public\n        pure\n        returns (bool equal)\n    {\n        equal = areBytesEqual(lhs, rhs);\n        return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function publicReadAddress(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (address result)\n    {\n        result = readAddress(b, index);\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function publicWriteAddress(\n        bytes memory b,\n        uint256 index,\n        address input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeAddress(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function publicReadBytes32(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = readBytes32(b, index);\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function publicWriteBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes32(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function publicReadUint256(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (uint256 result)\n    {\n        result = readUint256(b, index);\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function publicWriteUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeUint256(b, index, input);\n        return b;\n    }\n\n\n    function publicReadBytes(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (bytes memory result)\n    {\n        result = readBytes(b, index);\n        return result;\n    }\n\n\n    function publicWriteBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes(b, index, input);\n        return b;\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GTE_20_LENGTH_REQUIRED = \"Length must be greater than or equal to 20.\";\n    string constant GTE_32_LENGTH_REQUIRED = \"Length must be greater than or equal to 32.\";\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(bytes memory lhs, bytes memory rhs)\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memcpy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Read length of nested bytes\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memcpy(\n            getMemAddress(b) + index + 32,  // +32 to skip length of <b>\n            getMemAddress(input),           // include length of byte array\n            input.length + 32               // +32 bytes to store length\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem {\n    \n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 address_)\n    {\n        assembly {\n            address_ := input\n        }\n        return address_;\n    }\n    \n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to\n    /// @param source memory address to copy bytes from\n    /// @param length number of bytes to copy\n    function memcpy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n            \n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `send` and `dend` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n                    \n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(send)\n                    \n                    // Copy whole words front to back\n                    for {} lt(source, send) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dend, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `send` and `dend` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let send := add(source, length)\n                    let dend := add(dest, length)\n                    \n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n                    \n                    // Copy whole words back to front\n                    for {} lt(source, send) {} {\n                        mstore(dend, mload(send))\n                        send := sub(send, 32)\n                        dend := sub(dend, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x037003b694b08dfb9684b4f58fb9afff0501be5f1013f1acd76f57dec6ae845c",
	"compiler": {
		"name": "solc",
		"version": "0.4.24",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 0
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}